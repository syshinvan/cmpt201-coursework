#include <stdbool.h>
2 #include < stdint.h > 3 #include < stdio.h > 4 #include < stdlib.h >
    5 6 #define ASSERT(expr) 7 ┆ {
  8 ┆ ┆ if (!(expr)) {
    9 ┆ ┆ ┆ fprintf(stderr, "Assertion failed: %s\n", #expr);
    10 ┆ ┆ ┆ exit(1);
    11 ┆ ┆
  }
  12 ┆
}
13 14 #define TEST(expr) 15 ┆ {
  16 ┆ ┆ if (!(expr)) {
    17 ┆ ┆ ┆ fprintf(stderr, "Test failed: %s\n", #expr);
    18 ┆ ┆ ┆ exit(1);
    19 ┆ ┆
  }
  else {
    20 ┆ ┆ ┆ printf("Test passed: %s\n", #expr);
    21 ┆ ┆
  }
  22 ┆
}
23 24 typedef struct node {
  25 ┆ uint64_t data;
  26 ┆ struct node *next;
  27
} node_t;
28 29 node_t *head = NULL;
30 31 void insert_sorted(uint64_t data) {
  32 ┆ node_t *new_node = malloc(sizeof(node_t));
  33 ┆ ASSERT(new_node != NULL);
  34 ┆ new_node->data = data;
  35 ┆ new_node->next = NULL;
  36 ┆ 37 ┆ if (head == NULL || data < head->data) {
    38 ┆ ┆ new_node->next = head;
    39 ┆ ┆ head = new_node;
    40 ┆ ┆ return;
    ┆ }
 42
 43 ┆ node_t *curr = head->next;
 44 ┆ node_t *prev = head;
 45 ┆
 46 ┆ while (curr != NULL && curr->data <= data) {
 47 ┆ ┆ prev = curr;
 48 ┆ ┆ curr = curr->next;
 49 ┆ }
 50 ┆
 51 ┆ prev->next = new_node;
 52 ┆ new_node->next = curr;
 53 ┆
 54 ┆ ASSERT(prev->data <= new_node->data);
 55 ┆ ASSERT(curr == NULL || new_node->data <= curr->data);
 56 }
 57
 58 int index_of(uint64_t data) {
 59 ┆ node_t *curr = head;
 60 ┆ int index = 0;
 61 ┆
 62 ┆ while (curr != NULL) {
 63 ┆ ┆ if (curr->data == data) {
 64 ┆ ┆ ┆ return index;
 65 ┆ ┆ }
 66 ┆ ┆
 67 ┆ ┆ curr = curr->next;
 68 ┆ ┆ index++;
 69 ┆ }
 70 ┆
 71 ┆ return -1;
 72 }
 73
